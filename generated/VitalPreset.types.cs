// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using QuickType;
//
//    var vitalPreset = VitalPreset.FromJson(jsonString);
//    var presetStyle = PresetStyle.FromJson(jsonString);
//    var presetSettings = PresetSettings.FromJson(jsonString);
//    var lfo = Lfo.FromJson(jsonString);
//    var modulation = Modulation.FromJson(jsonString);
//    var source = Source.FromJson(jsonString);
//    var sample = Sample.FromJson(jsonString);
//    var wavetable = Wavetable.FromJson(jsonString);
//    var group = Group.FromJson(jsonString);
//    var component = Component.FromJson(jsonString);
//    var keyframe = Keyframe.FromJson(jsonString);
//    var purpleType = PurpleType.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class VitalPreset
    {
        [JsonProperty("author")]
        public string Author { get; set; }

        [JsonProperty("comments")]
        public string Comments { get; set; }

        [JsonProperty("macro1")]
        public string Macro1 { get; set; }

        [JsonProperty("macro2")]
        public string Macro2 { get; set; }

        [JsonProperty("macro3")]
        public string Macro3 { get; set; }

        [JsonProperty("macro4")]
        public string Macro4 { get; set; }

        [JsonProperty("preset_name", NullValueHandling = NullValueHandling.Ignore)]
        public string PresetName { get; set; }

        [JsonProperty("preset_style")]
        public PresetStyleEnum PresetStyle { get; set; }

        [JsonProperty("settings")]
        public PresetSettings Settings { get; set; }

        [JsonProperty("synth_version")]
        public string SynthVersion { get; set; }
    }

    public partial class PresetSettings
    {
        [JsonProperty("beats_per_minute")]
        public double BeatsPerMinute { get; set; }

        [JsonProperty("bypass", NullValueHandling = NullValueHandling.Ignore)]
        public double? Bypass { get; set; }

        [JsonProperty("chorus_cutoff", NullValueHandling = NullValueHandling.Ignore)]
        public double? ChorusCutoff { get; set; }

        [JsonProperty("chorus_damping", NullValueHandling = NullValueHandling.Ignore)]
        public double? ChorusDamping { get; set; }

        [JsonProperty("chorus_delay_1")]
        public double ChorusDelay1 { get; set; }

        [JsonProperty("chorus_delay_2")]
        public double ChorusDelay2 { get; set; }

        [JsonProperty("chorus_dry_wet")]
        public double ChorusDryWet { get; set; }

        [JsonProperty("chorus_feedback")]
        public double ChorusFeedback { get; set; }

        [JsonProperty("chorus_frequency")]
        public double ChorusFrequency { get; set; }

        [JsonProperty("chorus_mod_depth")]
        public double ChorusModDepth { get; set; }

        [JsonProperty("chorus_on")]
        public double ChorusOn { get; set; }

        [JsonProperty("chorus_spread", NullValueHandling = NullValueHandling.Ignore)]
        public double? ChorusSpread { get; set; }

        [JsonProperty("chorus_sync")]
        public double ChorusSync { get; set; }

        [JsonProperty("chorus_tempo")]
        public double ChorusTempo { get; set; }

        [JsonProperty("chorus_voices")]
        public double ChorusVoices { get; set; }

        [JsonProperty("compressor_attack")]
        public double CompressorAttack { get; set; }

        [JsonProperty("compressor_band_gain")]
        public double CompressorBandGain { get; set; }

        [JsonProperty("compressor_band_lower_ratio")]
        public double CompressorBandLowerRatio { get; set; }

        [JsonProperty("compressor_band_lower_threshold")]
        public double CompressorBandLowerThreshold { get; set; }

        [JsonProperty("compressor_band_upper_ratio")]
        public double CompressorBandUpperRatio { get; set; }

        [JsonProperty("compressor_band_upper_threshold")]
        public double CompressorBandUpperThreshold { get; set; }

        [JsonProperty("compressor_enabled_bands")]
        public double CompressorEnabledBands { get; set; }

        [JsonProperty("compressor_high_gain")]
        public double CompressorHighGain { get; set; }

        [JsonProperty("compressor_high_lower_ratio")]
        public double CompressorHighLowerRatio { get; set; }

        [JsonProperty("compressor_high_lower_threshold")]
        public double CompressorHighLowerThreshold { get; set; }

        [JsonProperty("compressor_high_upper_ratio")]
        public double CompressorHighUpperRatio { get; set; }

        [JsonProperty("compressor_high_upper_threshold")]
        public double CompressorHighUpperThreshold { get; set; }

        [JsonProperty("compressor_low_gain")]
        public double CompressorLowGain { get; set; }

        [JsonProperty("compressor_low_lower_ratio")]
        public double CompressorLowLowerRatio { get; set; }

        [JsonProperty("compressor_low_lower_threshold")]
        public double CompressorLowLowerThreshold { get; set; }

        [JsonProperty("compressor_low_upper_ratio")]
        public double CompressorLowUpperRatio { get; set; }

        [JsonProperty("compressor_low_upper_threshold")]
        public double CompressorLowUpperThreshold { get; set; }

        [JsonProperty("compressor_mix", NullValueHandling = NullValueHandling.Ignore)]
        public double? CompressorMix { get; set; }

        [JsonProperty("compressor_on")]
        public double CompressorOn { get; set; }

        [JsonProperty("compressor_release")]
        public double CompressorRelease { get; set; }

        [JsonProperty("delay_aux_frequency")]
        public double DelayAuxFrequency { get; set; }

        [JsonProperty("delay_aux_sync")]
        public double DelayAuxSync { get; set; }

        [JsonProperty("delay_aux_tempo")]
        public double DelayAuxTempo { get; set; }

        [JsonProperty("delay_dry_wet")]
        public double DelayDryWet { get; set; }

        [JsonProperty("delay_feedback")]
        public double DelayFeedback { get; set; }

        [JsonProperty("delay_filter_cutoff")]
        public double DelayFilterCutoff { get; set; }

        [JsonProperty("delay_filter_spread")]
        public double DelayFilterSpread { get; set; }

        [JsonProperty("delay_frequency")]
        public double DelayFrequency { get; set; }

        [JsonProperty("delay_on")]
        public double DelayOn { get; set; }

        [JsonProperty("delay_style")]
        public double DelayStyle { get; set; }

        [JsonProperty("delay_sync")]
        public double DelaySync { get; set; }

        [JsonProperty("delay_tempo")]
        public double DelayTempo { get; set; }

        [JsonProperty("distortion_drive")]
        public double DistortionDrive { get; set; }

        [JsonProperty("distortion_filter_blend")]
        public double DistortionFilterBlend { get; set; }

        [JsonProperty("distortion_filter_cutoff")]
        public double DistortionFilterCutoff { get; set; }

        [JsonProperty("distortion_filter_order")]
        public double DistortionFilterOrder { get; set; }

        [JsonProperty("distortion_filter_resonance")]
        public double DistortionFilterResonance { get; set; }

        [JsonProperty("distortion_mix")]
        public double DistortionMix { get; set; }

        [JsonProperty("distortion_on")]
        public double DistortionOn { get; set; }

        [JsonProperty("distortion_type")]
        public double DistortionType { get; set; }

        [JsonProperty("effect_chain_order")]
        public double EffectChainOrder { get; set; }

        [JsonProperty("env_1_attack")]
        public double Env1_Attack { get; set; }

        [JsonProperty("env_1_attack_power")]
        public double Env1_AttackPower { get; set; }

        [JsonProperty("env_1_decay")]
        public double Env1_Decay { get; set; }

        [JsonProperty("env_1_decay_power")]
        public double Env1_DecayPower { get; set; }

        [JsonProperty("env_1_delay")]
        public double Env1_Delay { get; set; }

        [JsonProperty("env_1_hold")]
        public double Env1_Hold { get; set; }

        [JsonProperty("env_1_release")]
        public double Env1_Release { get; set; }

        [JsonProperty("env_1_release_power")]
        public double Env1_ReleasePower { get; set; }

        [JsonProperty("env_1_sustain")]
        public double Env1_Sustain { get; set; }

        [JsonProperty("env_2_attack")]
        public double Env2_Attack { get; set; }

        [JsonProperty("env_2_attack_power")]
        public double Env2_AttackPower { get; set; }

        [JsonProperty("env_2_decay")]
        public double Env2_Decay { get; set; }

        [JsonProperty("env_2_decay_power")]
        public double Env2_DecayPower { get; set; }

        [JsonProperty("env_2_delay")]
        public double Env2_Delay { get; set; }

        [JsonProperty("env_2_hold")]
        public double Env2_Hold { get; set; }

        [JsonProperty("env_2_release")]
        public double Env2_Release { get; set; }

        [JsonProperty("env_2_release_power")]
        public double Env2_ReleasePower { get; set; }

        [JsonProperty("env_2_sustain")]
        public double Env2_Sustain { get; set; }

        [JsonProperty("env_3_attack")]
        public double Env3_Attack { get; set; }

        [JsonProperty("env_3_attack_power")]
        public double Env3_AttackPower { get; set; }

        [JsonProperty("env_3_decay")]
        public double Env3_Decay { get; set; }

        [JsonProperty("env_3_decay_power")]
        public double Env3_DecayPower { get; set; }

        [JsonProperty("env_3_delay")]
        public double Env3_Delay { get; set; }

        [JsonProperty("env_3_hold")]
        public double Env3_Hold { get; set; }

        [JsonProperty("env_3_release")]
        public double Env3_Release { get; set; }

        [JsonProperty("env_3_release_power")]
        public double Env3_ReleasePower { get; set; }

        [JsonProperty("env_3_sustain")]
        public double Env3_Sustain { get; set; }

        [JsonProperty("env_4_attack")]
        public double Env4_Attack { get; set; }

        [JsonProperty("env_4_attack_power")]
        public double Env4_AttackPower { get; set; }

        [JsonProperty("env_4_decay")]
        public double Env4_Decay { get; set; }

        [JsonProperty("env_4_decay_power")]
        public double Env4_DecayPower { get; set; }

        [JsonProperty("env_4_delay")]
        public double Env4_Delay { get; set; }

        [JsonProperty("env_4_hold")]
        public double Env4_Hold { get; set; }

        [JsonProperty("env_4_release")]
        public double Env4_Release { get; set; }

        [JsonProperty("env_4_release_power")]
        public double Env4_ReleasePower { get; set; }

        [JsonProperty("env_4_sustain")]
        public double Env4_Sustain { get; set; }

        [JsonProperty("env_5_attack")]
        public double Env5_Attack { get; set; }

        [JsonProperty("env_5_attack_power")]
        public double Env5_AttackPower { get; set; }

        [JsonProperty("env_5_decay")]
        public double Env5_Decay { get; set; }

        [JsonProperty("env_5_decay_power")]
        public double Env5_DecayPower { get; set; }

        [JsonProperty("env_5_delay")]
        public double Env5_Delay { get; set; }

        [JsonProperty("env_5_hold")]
        public double Env5_Hold { get; set; }

        [JsonProperty("env_5_release")]
        public double Env5_Release { get; set; }

        [JsonProperty("env_5_release_power")]
        public double Env5_ReleasePower { get; set; }

        [JsonProperty("env_5_sustain")]
        public double Env5_Sustain { get; set; }

        [JsonProperty("env_6_attack")]
        public double Env6_Attack { get; set; }

        [JsonProperty("env_6_attack_power")]
        public double Env6_AttackPower { get; set; }

        [JsonProperty("env_6_decay")]
        public double Env6_Decay { get; set; }

        [JsonProperty("env_6_decay_power")]
        public double Env6_DecayPower { get; set; }

        [JsonProperty("env_6_delay")]
        public double Env6_Delay { get; set; }

        [JsonProperty("env_6_hold")]
        public double Env6_Hold { get; set; }

        [JsonProperty("env_6_release")]
        public double Env6_Release { get; set; }

        [JsonProperty("env_6_release_power")]
        public double Env6_ReleasePower { get; set; }

        [JsonProperty("env_6_sustain")]
        public double Env6_Sustain { get; set; }

        [JsonProperty("eq_band_cutoff")]
        public double EqBandCutoff { get; set; }

        [JsonProperty("eq_band_gain")]
        public double EqBandGain { get; set; }

        [JsonProperty("eq_band_mode")]
        public double EqBandMode { get; set; }

        [JsonProperty("eq_band_resonance")]
        public double EqBandResonance { get; set; }

        [JsonProperty("eq_high_cutoff")]
        public double EqHighCutoff { get; set; }

        [JsonProperty("eq_high_gain")]
        public double EqHighGain { get; set; }

        [JsonProperty("eq_high_mode")]
        public double EqHighMode { get; set; }

        [JsonProperty("eq_high_resonance")]
        public double EqHighResonance { get; set; }

        [JsonProperty("eq_low_cutoff")]
        public double EqLowCutoff { get; set; }

        [JsonProperty("eq_low_gain")]
        public double EqLowGain { get; set; }

        [JsonProperty("eq_low_mode")]
        public double EqLowMode { get; set; }

        [JsonProperty("eq_low_resonance")]
        public double EqLowResonance { get; set; }

        [JsonProperty("eq_on")]
        public double EqOn { get; set; }

        [JsonProperty("filter_1_blend")]
        public double Filter1_Blend { get; set; }

        [JsonProperty("filter_1_blend_transpose")]
        public double Filter1_BlendTranspose { get; set; }

        [JsonProperty("filter_1_cutoff")]
        public double Filter1_Cutoff { get; set; }

        [JsonProperty("filter_1_drive")]
        public double Filter1_Drive { get; set; }

        [JsonProperty("filter_1_filter_input")]
        public double Filter1_FilterInput { get; set; }

        [JsonProperty("filter_1_formant_resonance")]
        public double Filter1_FormantResonance { get; set; }

        [JsonProperty("filter_1_formant_spread", NullValueHandling = NullValueHandling.Ignore)]
        public double? Filter1_FormantSpread { get; set; }

        [JsonProperty("filter_1_formant_transpose")]
        public double Filter1_FormantTranspose { get; set; }

        [JsonProperty("filter_1_formant_x")]
        public double Filter1_FormantX { get; set; }

        [JsonProperty("filter_1_formant_y")]
        public double Filter1_FormantY { get; set; }

        [JsonProperty("filter_1_keytrack")]
        public double Filter1_Keytrack { get; set; }

        [JsonProperty("filter_1_mix")]
        public double Filter1_Mix { get; set; }

        [JsonProperty("filter_1_model")]
        public double Filter1_Model { get; set; }

        [JsonProperty("filter_1_on")]
        public double Filter1_On { get; set; }

        [JsonProperty("filter_1_resonance")]
        public double Filter1_Resonance { get; set; }

        [JsonProperty("filter_1_style")]
        public double Filter1_Style { get; set; }

        [JsonProperty("filter_2_blend")]
        public double Filter2_Blend { get; set; }

        [JsonProperty("filter_2_blend_transpose")]
        public double Filter2_BlendTranspose { get; set; }

        [JsonProperty("filter_2_cutoff")]
        public double Filter2_Cutoff { get; set; }

        [JsonProperty("filter_2_drive")]
        public double Filter2_Drive { get; set; }

        [JsonProperty("filter_2_filter_input")]
        public double Filter2_FilterInput { get; set; }

        [JsonProperty("filter_2_formant_resonance")]
        public double Filter2_FormantResonance { get; set; }

        [JsonProperty("filter_2_formant_spread", NullValueHandling = NullValueHandling.Ignore)]
        public double? Filter2_FormantSpread { get; set; }

        [JsonProperty("filter_2_formant_transpose")]
        public double Filter2_FormantTranspose { get; set; }

        [JsonProperty("filter_2_formant_x")]
        public double Filter2_FormantX { get; set; }

        [JsonProperty("filter_2_formant_y")]
        public double Filter2_FormantY { get; set; }

        [JsonProperty("filter_2_keytrack")]
        public double Filter2_Keytrack { get; set; }

        [JsonProperty("filter_2_mix")]
        public double Filter2_Mix { get; set; }

        [JsonProperty("filter_2_model")]
        public double Filter2_Model { get; set; }

        [JsonProperty("filter_2_on")]
        public double Filter2_On { get; set; }

        [JsonProperty("filter_2_resonance")]
        public double Filter2_Resonance { get; set; }

        [JsonProperty("filter_2_style")]
        public double Filter2_Style { get; set; }

        [JsonProperty("filter_fx_blend")]
        public double FilterFxBlend { get; set; }

        [JsonProperty("filter_fx_blend_transpose")]
        public double FilterFxBlendTranspose { get; set; }

        [JsonProperty("filter_fx_cutoff")]
        public double FilterFxCutoff { get; set; }

        [JsonProperty("filter_fx_drive")]
        public double FilterFxDrive { get; set; }

        [JsonProperty("filter_fx_formant_resonance")]
        public double FilterFxFormantResonance { get; set; }

        [JsonProperty("filter_fx_formant_spread", NullValueHandling = NullValueHandling.Ignore)]
        public double? FilterFxFormantSpread { get; set; }

        [JsonProperty("filter_fx_formant_transpose")]
        public double FilterFxFormantTranspose { get; set; }

        [JsonProperty("filter_fx_formant_x")]
        public double FilterFxFormantX { get; set; }

        [JsonProperty("filter_fx_formant_y")]
        public double FilterFxFormantY { get; set; }

        [JsonProperty("filter_fx_keytrack")]
        public double FilterFxKeytrack { get; set; }

        [JsonProperty("filter_fx_mix")]
        public double FilterFxMix { get; set; }

        [JsonProperty("filter_fx_model")]
        public double FilterFxModel { get; set; }

        [JsonProperty("filter_fx_on")]
        public double FilterFxOn { get; set; }

        [JsonProperty("filter_fx_resonance")]
        public double FilterFxResonance { get; set; }

        [JsonProperty("filter_fx_style")]
        public double FilterFxStyle { get; set; }

        [JsonProperty("flanger_center")]
        public double FlangerCenter { get; set; }

        [JsonProperty("flanger_dry_wet")]
        public double FlangerDryWet { get; set; }

        [JsonProperty("flanger_feedback")]
        public double FlangerFeedback { get; set; }

        [JsonProperty("flanger_frequency")]
        public double FlangerFrequency { get; set; }

        [JsonProperty("flanger_mod_depth")]
        public double FlangerModDepth { get; set; }

        [JsonProperty("flanger_on")]
        public double FlangerOn { get; set; }

        [JsonProperty("flanger_phase_offset")]
        public double FlangerPhaseOffset { get; set; }

        [JsonProperty("flanger_sync")]
        public double FlangerSync { get; set; }

        [JsonProperty("flanger_tempo")]
        public double FlangerTempo { get; set; }

        [JsonProperty("legato")]
        public double Legato { get; set; }

        [JsonProperty("lfo_1_delay_time")]
        public double Lfo1_DelayTime { get; set; }

        [JsonProperty("lfo_1_fade_time")]
        public double Lfo1_FadeTime { get; set; }

        [JsonProperty("lfo_1_frequency")]
        public double Lfo1_Frequency { get; set; }

        [JsonProperty("lfo_1_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo1_KeytrackTranspose { get; set; }

        [JsonProperty("lfo_1_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo1_KeytrackTune { get; set; }

        [JsonProperty("lfo_1_phase")]
        public double Lfo1_Phase { get; set; }

        [JsonProperty("lfo_1_smooth_mode", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo1_SmoothMode { get; set; }

        [JsonProperty("lfo_1_smooth_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo1_SmoothTime { get; set; }

        [JsonProperty("lfo_1_stereo")]
        public double Lfo1_Stereo { get; set; }

        [JsonProperty("lfo_1_sync")]
        public double Lfo1_Sync { get; set; }

        [JsonProperty("lfo_1_sync_type")]
        public double Lfo1_SyncType { get; set; }

        [JsonProperty("lfo_1_tempo")]
        public double Lfo1_Tempo { get; set; }

        [JsonProperty("lfo_2_delay_time")]
        public double Lfo2_DelayTime { get; set; }

        [JsonProperty("lfo_2_fade_time")]
        public double Lfo2_FadeTime { get; set; }

        [JsonProperty("lfo_2_frequency")]
        public double Lfo2_Frequency { get; set; }

        [JsonProperty("lfo_2_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo2_KeytrackTranspose { get; set; }

        [JsonProperty("lfo_2_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo2_KeytrackTune { get; set; }

        [JsonProperty("lfo_2_phase")]
        public double Lfo2_Phase { get; set; }

        [JsonProperty("lfo_2_smooth_mode", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo2_SmoothMode { get; set; }

        [JsonProperty("lfo_2_smooth_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo2_SmoothTime { get; set; }

        [JsonProperty("lfo_2_stereo")]
        public double Lfo2_Stereo { get; set; }

        [JsonProperty("lfo_2_sync")]
        public double Lfo2_Sync { get; set; }

        [JsonProperty("lfo_2_sync_type")]
        public double Lfo2_SyncType { get; set; }

        [JsonProperty("lfo_2_tempo")]
        public double Lfo2_Tempo { get; set; }

        [JsonProperty("lfo_3_delay_time")]
        public double Lfo3_DelayTime { get; set; }

        [JsonProperty("lfo_3_fade_time")]
        public double Lfo3_FadeTime { get; set; }

        [JsonProperty("lfo_3_frequency")]
        public double Lfo3_Frequency { get; set; }

        [JsonProperty("lfo_3_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo3_KeytrackTranspose { get; set; }

        [JsonProperty("lfo_3_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo3_KeytrackTune { get; set; }

        [JsonProperty("lfo_3_phase")]
        public double Lfo3_Phase { get; set; }

        [JsonProperty("lfo_3_smooth_mode", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo3_SmoothMode { get; set; }

        [JsonProperty("lfo_3_smooth_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo3_SmoothTime { get; set; }

        [JsonProperty("lfo_3_stereo")]
        public double Lfo3_Stereo { get; set; }

        [JsonProperty("lfo_3_sync")]
        public double Lfo3_Sync { get; set; }

        [JsonProperty("lfo_3_sync_type")]
        public double Lfo3_SyncType { get; set; }

        [JsonProperty("lfo_3_tempo")]
        public double Lfo3_Tempo { get; set; }

        [JsonProperty("lfo_4_delay_time")]
        public double Lfo4_DelayTime { get; set; }

        [JsonProperty("lfo_4_fade_time")]
        public double Lfo4_FadeTime { get; set; }

        [JsonProperty("lfo_4_frequency")]
        public double Lfo4_Frequency { get; set; }

        [JsonProperty("lfo_4_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo4_KeytrackTranspose { get; set; }

        [JsonProperty("lfo_4_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo4_KeytrackTune { get; set; }

        [JsonProperty("lfo_4_phase")]
        public double Lfo4_Phase { get; set; }

        [JsonProperty("lfo_4_smooth_mode", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo4_SmoothMode { get; set; }

        [JsonProperty("lfo_4_smooth_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo4_SmoothTime { get; set; }

        [JsonProperty("lfo_4_stereo")]
        public double Lfo4_Stereo { get; set; }

        [JsonProperty("lfo_4_sync")]
        public double Lfo4_Sync { get; set; }

        [JsonProperty("lfo_4_sync_type")]
        public double Lfo4_SyncType { get; set; }

        [JsonProperty("lfo_4_tempo")]
        public double Lfo4_Tempo { get; set; }

        [JsonProperty("lfo_5_delay_time")]
        public double Lfo5_DelayTime { get; set; }

        [JsonProperty("lfo_5_fade_time")]
        public double Lfo5_FadeTime { get; set; }

        [JsonProperty("lfo_5_frequency")]
        public double Lfo5_Frequency { get; set; }

        [JsonProperty("lfo_5_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo5_KeytrackTranspose { get; set; }

        [JsonProperty("lfo_5_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo5_KeytrackTune { get; set; }

        [JsonProperty("lfo_5_phase")]
        public double Lfo5_Phase { get; set; }

        [JsonProperty("lfo_5_smooth_mode", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo5_SmoothMode { get; set; }

        [JsonProperty("lfo_5_smooth_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo5_SmoothTime { get; set; }

        [JsonProperty("lfo_5_stereo")]
        public double Lfo5_Stereo { get; set; }

        [JsonProperty("lfo_5_sync")]
        public double Lfo5_Sync { get; set; }

        [JsonProperty("lfo_5_sync_type")]
        public double Lfo5_SyncType { get; set; }

        [JsonProperty("lfo_5_tempo")]
        public double Lfo5_Tempo { get; set; }

        [JsonProperty("lfo_6_delay_time")]
        public double Lfo6_DelayTime { get; set; }

        [JsonProperty("lfo_6_fade_time")]
        public double Lfo6_FadeTime { get; set; }

        [JsonProperty("lfo_6_frequency")]
        public double Lfo6_Frequency { get; set; }

        [JsonProperty("lfo_6_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo6_KeytrackTranspose { get; set; }

        [JsonProperty("lfo_6_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo6_KeytrackTune { get; set; }

        [JsonProperty("lfo_6_phase")]
        public double Lfo6_Phase { get; set; }

        [JsonProperty("lfo_6_smooth_mode", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo6_SmoothMode { get; set; }

        [JsonProperty("lfo_6_smooth_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo6_SmoothTime { get; set; }

        [JsonProperty("lfo_6_stereo")]
        public double Lfo6_Stereo { get; set; }

        [JsonProperty("lfo_6_sync")]
        public double Lfo6_Sync { get; set; }

        [JsonProperty("lfo_6_sync_type")]
        public double Lfo6_SyncType { get; set; }

        [JsonProperty("lfo_6_tempo")]
        public double Lfo6_Tempo { get; set; }

        [JsonProperty("lfo_7_delay_time")]
        public double Lfo7_DelayTime { get; set; }

        [JsonProperty("lfo_7_fade_time")]
        public double Lfo7_FadeTime { get; set; }

        [JsonProperty("lfo_7_frequency")]
        public double Lfo7_Frequency { get; set; }

        [JsonProperty("lfo_7_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo7_KeytrackTranspose { get; set; }

        [JsonProperty("lfo_7_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo7_KeytrackTune { get; set; }

        [JsonProperty("lfo_7_phase")]
        public double Lfo7_Phase { get; set; }

        [JsonProperty("lfo_7_smooth_mode", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo7_SmoothMode { get; set; }

        [JsonProperty("lfo_7_smooth_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo7_SmoothTime { get; set; }

        [JsonProperty("lfo_7_stereo")]
        public double Lfo7_Stereo { get; set; }

        [JsonProperty("lfo_7_sync")]
        public double Lfo7_Sync { get; set; }

        [JsonProperty("lfo_7_sync_type")]
        public double Lfo7_SyncType { get; set; }

        [JsonProperty("lfo_7_tempo")]
        public double Lfo7_Tempo { get; set; }

        [JsonProperty("lfo_8_delay_time")]
        public double Lfo8_DelayTime { get; set; }

        [JsonProperty("lfo_8_fade_time")]
        public double Lfo8_FadeTime { get; set; }

        [JsonProperty("lfo_8_frequency")]
        public double Lfo8_Frequency { get; set; }

        [JsonProperty("lfo_8_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo8_KeytrackTranspose { get; set; }

        [JsonProperty("lfo_8_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo8_KeytrackTune { get; set; }

        [JsonProperty("lfo_8_phase")]
        public double Lfo8_Phase { get; set; }

        [JsonProperty("lfo_8_smooth_mode", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo8_SmoothMode { get; set; }

        [JsonProperty("lfo_8_smooth_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lfo8_SmoothTime { get; set; }

        [JsonProperty("lfo_8_stereo")]
        public double Lfo8_Stereo { get; set; }

        [JsonProperty("lfo_8_sync")]
        public double Lfo8_Sync { get; set; }

        [JsonProperty("lfo_8_sync_type")]
        public double Lfo8_SyncType { get; set; }

        [JsonProperty("lfo_8_tempo")]
        public double Lfo8_Tempo { get; set; }

        [JsonProperty("lfos")]
        public Lfo[] Lfos { get; set; }

        [JsonProperty("macro_control_1")]
        public double MacroControl1 { get; set; }

        [JsonProperty("macro_control_2")]
        public double MacroControl2 { get; set; }

        [JsonProperty("macro_control_3")]
        public double MacroControl3 { get; set; }

        [JsonProperty("macro_control_4")]
        public double MacroControl4 { get; set; }

        [JsonProperty("mod_wheel")]
        public double ModWheel { get; set; }

        [JsonProperty("modulation_10_amount")]
        public double Modulation10_Amount { get; set; }

        [JsonProperty("modulation_10_bipolar")]
        public double Modulation10_Bipolar { get; set; }

        [JsonProperty("modulation_10_bypass")]
        public double Modulation10_Bypass { get; set; }

        [JsonProperty("modulation_10_power")]
        public double Modulation10_Power { get; set; }

        [JsonProperty("modulation_10_stereo")]
        public double Modulation10_Stereo { get; set; }

        [JsonProperty("modulation_11_amount")]
        public double Modulation11_Amount { get; set; }

        [JsonProperty("modulation_11_bipolar")]
        public double Modulation11_Bipolar { get; set; }

        [JsonProperty("modulation_11_bypass")]
        public double Modulation11_Bypass { get; set; }

        [JsonProperty("modulation_11_power")]
        public double Modulation11_Power { get; set; }

        [JsonProperty("modulation_11_stereo")]
        public double Modulation11_Stereo { get; set; }

        [JsonProperty("modulation_12_amount")]
        public double Modulation12_Amount { get; set; }

        [JsonProperty("modulation_12_bipolar")]
        public double Modulation12_Bipolar { get; set; }

        [JsonProperty("modulation_12_bypass")]
        public double Modulation12_Bypass { get; set; }

        [JsonProperty("modulation_12_power")]
        public double Modulation12_Power { get; set; }

        [JsonProperty("modulation_12_stereo")]
        public double Modulation12_Stereo { get; set; }

        [JsonProperty("modulation_13_amount")]
        public double Modulation13_Amount { get; set; }

        [JsonProperty("modulation_13_bipolar")]
        public double Modulation13_Bipolar { get; set; }

        [JsonProperty("modulation_13_bypass")]
        public double Modulation13_Bypass { get; set; }

        [JsonProperty("modulation_13_power")]
        public double Modulation13_Power { get; set; }

        [JsonProperty("modulation_13_stereo")]
        public double Modulation13_Stereo { get; set; }

        [JsonProperty("modulation_14_amount")]
        public double Modulation14_Amount { get; set; }

        [JsonProperty("modulation_14_bipolar")]
        public double Modulation14_Bipolar { get; set; }

        [JsonProperty("modulation_14_bypass")]
        public double Modulation14_Bypass { get; set; }

        [JsonProperty("modulation_14_power")]
        public double Modulation14_Power { get; set; }

        [JsonProperty("modulation_14_stereo")]
        public double Modulation14_Stereo { get; set; }

        [JsonProperty("modulation_15_amount")]
        public double Modulation15_Amount { get; set; }

        [JsonProperty("modulation_15_bipolar")]
        public double Modulation15_Bipolar { get; set; }

        [JsonProperty("modulation_15_bypass")]
        public double Modulation15_Bypass { get; set; }

        [JsonProperty("modulation_15_power")]
        public double Modulation15_Power { get; set; }

        [JsonProperty("modulation_15_stereo")]
        public double Modulation15_Stereo { get; set; }

        [JsonProperty("modulation_16_amount")]
        public double Modulation16_Amount { get; set; }

        [JsonProperty("modulation_16_bipolar")]
        public double Modulation16_Bipolar { get; set; }

        [JsonProperty("modulation_16_bypass")]
        public double Modulation16_Bypass { get; set; }

        [JsonProperty("modulation_16_power")]
        public double Modulation16_Power { get; set; }

        [JsonProperty("modulation_16_stereo")]
        public double Modulation16_Stereo { get; set; }

        [JsonProperty("modulation_17_amount")]
        public double Modulation17_Amount { get; set; }

        [JsonProperty("modulation_17_bipolar")]
        public double Modulation17_Bipolar { get; set; }

        [JsonProperty("modulation_17_bypass")]
        public double Modulation17_Bypass { get; set; }

        [JsonProperty("modulation_17_power")]
        public double Modulation17_Power { get; set; }

        [JsonProperty("modulation_17_stereo")]
        public double Modulation17_Stereo { get; set; }

        [JsonProperty("modulation_18_amount")]
        public double Modulation18_Amount { get; set; }

        [JsonProperty("modulation_18_bipolar")]
        public double Modulation18_Bipolar { get; set; }

        [JsonProperty("modulation_18_bypass")]
        public double Modulation18_Bypass { get; set; }

        [JsonProperty("modulation_18_power")]
        public double Modulation18_Power { get; set; }

        [JsonProperty("modulation_18_stereo")]
        public double Modulation18_Stereo { get; set; }

        [JsonProperty("modulation_19_amount")]
        public double Modulation19_Amount { get; set; }

        [JsonProperty("modulation_19_bipolar")]
        public double Modulation19_Bipolar { get; set; }

        [JsonProperty("modulation_19_bypass")]
        public double Modulation19_Bypass { get; set; }

        [JsonProperty("modulation_19_power")]
        public double Modulation19_Power { get; set; }

        [JsonProperty("modulation_19_stereo")]
        public double Modulation19_Stereo { get; set; }

        [JsonProperty("modulation_1_amount")]
        public double Modulation1_Amount { get; set; }

        [JsonProperty("modulation_1_bipolar")]
        public double Modulation1_Bipolar { get; set; }

        [JsonProperty("modulation_1_bypass")]
        public double Modulation1_Bypass { get; set; }

        [JsonProperty("modulation_1_power")]
        public double Modulation1_Power { get; set; }

        [JsonProperty("modulation_1_stereo")]
        public double Modulation1_Stereo { get; set; }

        [JsonProperty("modulation_20_amount")]
        public double Modulation20_Amount { get; set; }

        [JsonProperty("modulation_20_bipolar")]
        public double Modulation20_Bipolar { get; set; }

        [JsonProperty("modulation_20_bypass")]
        public double Modulation20_Bypass { get; set; }

        [JsonProperty("modulation_20_power")]
        public double Modulation20_Power { get; set; }

        [JsonProperty("modulation_20_stereo")]
        public double Modulation20_Stereo { get; set; }

        [JsonProperty("modulation_21_amount")]
        public double Modulation21_Amount { get; set; }

        [JsonProperty("modulation_21_bipolar")]
        public double Modulation21_Bipolar { get; set; }

        [JsonProperty("modulation_21_bypass")]
        public double Modulation21_Bypass { get; set; }

        [JsonProperty("modulation_21_power")]
        public double Modulation21_Power { get; set; }

        [JsonProperty("modulation_21_stereo")]
        public double Modulation21_Stereo { get; set; }

        [JsonProperty("modulation_22_amount")]
        public double Modulation22_Amount { get; set; }

        [JsonProperty("modulation_22_bipolar")]
        public double Modulation22_Bipolar { get; set; }

        [JsonProperty("modulation_22_bypass")]
        public double Modulation22_Bypass { get; set; }

        [JsonProperty("modulation_22_power")]
        public double Modulation22_Power { get; set; }

        [JsonProperty("modulation_22_stereo")]
        public double Modulation22_Stereo { get; set; }

        [JsonProperty("modulation_23_amount")]
        public double Modulation23_Amount { get; set; }

        [JsonProperty("modulation_23_bipolar")]
        public double Modulation23_Bipolar { get; set; }

        [JsonProperty("modulation_23_bypass")]
        public double Modulation23_Bypass { get; set; }

        [JsonProperty("modulation_23_power")]
        public double Modulation23_Power { get; set; }

        [JsonProperty("modulation_23_stereo")]
        public double Modulation23_Stereo { get; set; }

        [JsonProperty("modulation_24_amount")]
        public double Modulation24_Amount { get; set; }

        [JsonProperty("modulation_24_bipolar")]
        public double Modulation24_Bipolar { get; set; }

        [JsonProperty("modulation_24_bypass")]
        public double Modulation24_Bypass { get; set; }

        [JsonProperty("modulation_24_power")]
        public double Modulation24_Power { get; set; }

        [JsonProperty("modulation_24_stereo")]
        public double Modulation24_Stereo { get; set; }

        [JsonProperty("modulation_25_amount")]
        public double Modulation25_Amount { get; set; }

        [JsonProperty("modulation_25_bipolar")]
        public double Modulation25_Bipolar { get; set; }

        [JsonProperty("modulation_25_bypass")]
        public double Modulation25_Bypass { get; set; }

        [JsonProperty("modulation_25_power")]
        public double Modulation25_Power { get; set; }

        [JsonProperty("modulation_25_stereo")]
        public double Modulation25_Stereo { get; set; }

        [JsonProperty("modulation_26_amount")]
        public double Modulation26_Amount { get; set; }

        [JsonProperty("modulation_26_bipolar")]
        public double Modulation26_Bipolar { get; set; }

        [JsonProperty("modulation_26_bypass")]
        public double Modulation26_Bypass { get; set; }

        [JsonProperty("modulation_26_power")]
        public double Modulation26_Power { get; set; }

        [JsonProperty("modulation_26_stereo")]
        public double Modulation26_Stereo { get; set; }

        [JsonProperty("modulation_27_amount")]
        public double Modulation27_Amount { get; set; }

        [JsonProperty("modulation_27_bipolar")]
        public double Modulation27_Bipolar { get; set; }

        [JsonProperty("modulation_27_bypass")]
        public double Modulation27_Bypass { get; set; }

        [JsonProperty("modulation_27_power")]
        public double Modulation27_Power { get; set; }

        [JsonProperty("modulation_27_stereo")]
        public double Modulation27_Stereo { get; set; }

        [JsonProperty("modulation_28_amount")]
        public double Modulation28_Amount { get; set; }

        [JsonProperty("modulation_28_bipolar")]
        public double Modulation28_Bipolar { get; set; }

        [JsonProperty("modulation_28_bypass")]
        public double Modulation28_Bypass { get; set; }

        [JsonProperty("modulation_28_power")]
        public double Modulation28_Power { get; set; }

        [JsonProperty("modulation_28_stereo")]
        public double Modulation28_Stereo { get; set; }

        [JsonProperty("modulation_29_amount")]
        public double Modulation29_Amount { get; set; }

        [JsonProperty("modulation_29_bipolar")]
        public double Modulation29_Bipolar { get; set; }

        [JsonProperty("modulation_29_bypass")]
        public double Modulation29_Bypass { get; set; }

        [JsonProperty("modulation_29_power")]
        public double Modulation29_Power { get; set; }

        [JsonProperty("modulation_29_stereo")]
        public double Modulation29_Stereo { get; set; }

        [JsonProperty("modulation_2_amount")]
        public double Modulation2_Amount { get; set; }

        [JsonProperty("modulation_2_bipolar")]
        public double Modulation2_Bipolar { get; set; }

        [JsonProperty("modulation_2_bypass")]
        public double Modulation2_Bypass { get; set; }

        [JsonProperty("modulation_2_power")]
        public double Modulation2_Power { get; set; }

        [JsonProperty("modulation_2_stereo")]
        public double Modulation2_Stereo { get; set; }

        [JsonProperty("modulation_30_amount")]
        public double Modulation30_Amount { get; set; }

        [JsonProperty("modulation_30_bipolar")]
        public double Modulation30_Bipolar { get; set; }

        [JsonProperty("modulation_30_bypass")]
        public double Modulation30_Bypass { get; set; }

        [JsonProperty("modulation_30_power")]
        public double Modulation30_Power { get; set; }

        [JsonProperty("modulation_30_stereo")]
        public double Modulation30_Stereo { get; set; }

        [JsonProperty("modulation_31_amount")]
        public double Modulation31_Amount { get; set; }

        [JsonProperty("modulation_31_bipolar")]
        public double Modulation31_Bipolar { get; set; }

        [JsonProperty("modulation_31_bypass")]
        public double Modulation31_Bypass { get; set; }

        [JsonProperty("modulation_31_power")]
        public double Modulation31_Power { get; set; }

        [JsonProperty("modulation_31_stereo")]
        public double Modulation31_Stereo { get; set; }

        [JsonProperty("modulation_32_amount")]
        public double Modulation32_Amount { get; set; }

        [JsonProperty("modulation_32_bipolar")]
        public double Modulation32_Bipolar { get; set; }

        [JsonProperty("modulation_32_bypass")]
        public double Modulation32_Bypass { get; set; }

        [JsonProperty("modulation_32_power")]
        public double Modulation32_Power { get; set; }

        [JsonProperty("modulation_32_stereo")]
        public double Modulation32_Stereo { get; set; }

        [JsonProperty("modulation_33_amount")]
        public double Modulation33_Amount { get; set; }

        [JsonProperty("modulation_33_bipolar")]
        public double Modulation33_Bipolar { get; set; }

        [JsonProperty("modulation_33_bypass")]
        public double Modulation33_Bypass { get; set; }

        [JsonProperty("modulation_33_power")]
        public double Modulation33_Power { get; set; }

        [JsonProperty("modulation_33_stereo")]
        public double Modulation33_Stereo { get; set; }

        [JsonProperty("modulation_34_amount")]
        public double Modulation34_Amount { get; set; }

        [JsonProperty("modulation_34_bipolar")]
        public double Modulation34_Bipolar { get; set; }

        [JsonProperty("modulation_34_bypass")]
        public double Modulation34_Bypass { get; set; }

        [JsonProperty("modulation_34_power")]
        public double Modulation34_Power { get; set; }

        [JsonProperty("modulation_34_stereo")]
        public double Modulation34_Stereo { get; set; }

        [JsonProperty("modulation_35_amount")]
        public double Modulation35_Amount { get; set; }

        [JsonProperty("modulation_35_bipolar")]
        public double Modulation35_Bipolar { get; set; }

        [JsonProperty("modulation_35_bypass")]
        public double Modulation35_Bypass { get; set; }

        [JsonProperty("modulation_35_power")]
        public double Modulation35_Power { get; set; }

        [JsonProperty("modulation_35_stereo")]
        public double Modulation35_Stereo { get; set; }

        [JsonProperty("modulation_36_amount")]
        public double Modulation36_Amount { get; set; }

        [JsonProperty("modulation_36_bipolar")]
        public double Modulation36_Bipolar { get; set; }

        [JsonProperty("modulation_36_bypass")]
        public double Modulation36_Bypass { get; set; }

        [JsonProperty("modulation_36_power")]
        public double Modulation36_Power { get; set; }

        [JsonProperty("modulation_36_stereo")]
        public double Modulation36_Stereo { get; set; }

        [JsonProperty("modulation_37_amount")]
        public double Modulation37_Amount { get; set; }

        [JsonProperty("modulation_37_bipolar")]
        public double Modulation37_Bipolar { get; set; }

        [JsonProperty("modulation_37_bypass")]
        public double Modulation37_Bypass { get; set; }

        [JsonProperty("modulation_37_power")]
        public double Modulation37_Power { get; set; }

        [JsonProperty("modulation_37_stereo")]
        public double Modulation37_Stereo { get; set; }

        [JsonProperty("modulation_38_amount")]
        public double Modulation38_Amount { get; set; }

        [JsonProperty("modulation_38_bipolar")]
        public double Modulation38_Bipolar { get; set; }

        [JsonProperty("modulation_38_bypass")]
        public double Modulation38_Bypass { get; set; }

        [JsonProperty("modulation_38_power")]
        public double Modulation38_Power { get; set; }

        [JsonProperty("modulation_38_stereo")]
        public double Modulation38_Stereo { get; set; }

        [JsonProperty("modulation_39_amount")]
        public double Modulation39_Amount { get; set; }

        [JsonProperty("modulation_39_bipolar")]
        public double Modulation39_Bipolar { get; set; }

        [JsonProperty("modulation_39_bypass")]
        public double Modulation39_Bypass { get; set; }

        [JsonProperty("modulation_39_power")]
        public double Modulation39_Power { get; set; }

        [JsonProperty("modulation_39_stereo")]
        public double Modulation39_Stereo { get; set; }

        [JsonProperty("modulation_3_amount")]
        public double Modulation3_Amount { get; set; }

        [JsonProperty("modulation_3_bipolar")]
        public double Modulation3_Bipolar { get; set; }

        [JsonProperty("modulation_3_bypass")]
        public double Modulation3_Bypass { get; set; }

        [JsonProperty("modulation_3_power")]
        public double Modulation3_Power { get; set; }

        [JsonProperty("modulation_3_stereo")]
        public double Modulation3_Stereo { get; set; }

        [JsonProperty("modulation_40_amount")]
        public double Modulation40_Amount { get; set; }

        [JsonProperty("modulation_40_bipolar")]
        public double Modulation40_Bipolar { get; set; }

        [JsonProperty("modulation_40_bypass")]
        public double Modulation40_Bypass { get; set; }

        [JsonProperty("modulation_40_power")]
        public double Modulation40_Power { get; set; }

        [JsonProperty("modulation_40_stereo")]
        public double Modulation40_Stereo { get; set; }

        [JsonProperty("modulation_41_amount")]
        public double Modulation41_Amount { get; set; }

        [JsonProperty("modulation_41_bipolar")]
        public double Modulation41_Bipolar { get; set; }

        [JsonProperty("modulation_41_bypass")]
        public double Modulation41_Bypass { get; set; }

        [JsonProperty("modulation_41_power")]
        public double Modulation41_Power { get; set; }

        [JsonProperty("modulation_41_stereo")]
        public double Modulation41_Stereo { get; set; }

        [JsonProperty("modulation_42_amount")]
        public double Modulation42_Amount { get; set; }

        [JsonProperty("modulation_42_bipolar")]
        public double Modulation42_Bipolar { get; set; }

        [JsonProperty("modulation_42_bypass")]
        public double Modulation42_Bypass { get; set; }

        [JsonProperty("modulation_42_power")]
        public double Modulation42_Power { get; set; }

        [JsonProperty("modulation_42_stereo")]
        public double Modulation42_Stereo { get; set; }

        [JsonProperty("modulation_43_amount")]
        public double Modulation43_Amount { get; set; }

        [JsonProperty("modulation_43_bipolar")]
        public double Modulation43_Bipolar { get; set; }

        [JsonProperty("modulation_43_bypass")]
        public double Modulation43_Bypass { get; set; }

        [JsonProperty("modulation_43_power")]
        public double Modulation43_Power { get; set; }

        [JsonProperty("modulation_43_stereo")]
        public double Modulation43_Stereo { get; set; }

        [JsonProperty("modulation_44_amount")]
        public double Modulation44_Amount { get; set; }

        [JsonProperty("modulation_44_bipolar")]
        public double Modulation44_Bipolar { get; set; }

        [JsonProperty("modulation_44_bypass")]
        public double Modulation44_Bypass { get; set; }

        [JsonProperty("modulation_44_power")]
        public double Modulation44_Power { get; set; }

        [JsonProperty("modulation_44_stereo")]
        public double Modulation44_Stereo { get; set; }

        [JsonProperty("modulation_45_amount")]
        public double Modulation45_Amount { get; set; }

        [JsonProperty("modulation_45_bipolar")]
        public double Modulation45_Bipolar { get; set; }

        [JsonProperty("modulation_45_bypass")]
        public double Modulation45_Bypass { get; set; }

        [JsonProperty("modulation_45_power")]
        public double Modulation45_Power { get; set; }

        [JsonProperty("modulation_45_stereo")]
        public double Modulation45_Stereo { get; set; }

        [JsonProperty("modulation_46_amount")]
        public double Modulation46_Amount { get; set; }

        [JsonProperty("modulation_46_bipolar")]
        public double Modulation46_Bipolar { get; set; }

        [JsonProperty("modulation_46_bypass")]
        public double Modulation46_Bypass { get; set; }

        [JsonProperty("modulation_46_power")]
        public double Modulation46_Power { get; set; }

        [JsonProperty("modulation_46_stereo")]
        public double Modulation46_Stereo { get; set; }

        [JsonProperty("modulation_47_amount")]
        public double Modulation47_Amount { get; set; }

        [JsonProperty("modulation_47_bipolar")]
        public double Modulation47_Bipolar { get; set; }

        [JsonProperty("modulation_47_bypass")]
        public double Modulation47_Bypass { get; set; }

        [JsonProperty("modulation_47_power")]
        public double Modulation47_Power { get; set; }

        [JsonProperty("modulation_47_stereo")]
        public double Modulation47_Stereo { get; set; }

        [JsonProperty("modulation_48_amount")]
        public double Modulation48_Amount { get; set; }

        [JsonProperty("modulation_48_bipolar")]
        public double Modulation48_Bipolar { get; set; }

        [JsonProperty("modulation_48_bypass")]
        public double Modulation48_Bypass { get; set; }

        [JsonProperty("modulation_48_power")]
        public double Modulation48_Power { get; set; }

        [JsonProperty("modulation_48_stereo")]
        public double Modulation48_Stereo { get; set; }

        [JsonProperty("modulation_49_amount")]
        public double Modulation49_Amount { get; set; }

        [JsonProperty("modulation_49_bipolar")]
        public double Modulation49_Bipolar { get; set; }

        [JsonProperty("modulation_49_bypass")]
        public double Modulation49_Bypass { get; set; }

        [JsonProperty("modulation_49_power")]
        public double Modulation49_Power { get; set; }

        [JsonProperty("modulation_49_stereo")]
        public double Modulation49_Stereo { get; set; }

        [JsonProperty("modulation_4_amount")]
        public double Modulation4_Amount { get; set; }

        [JsonProperty("modulation_4_bipolar")]
        public double Modulation4_Bipolar { get; set; }

        [JsonProperty("modulation_4_bypass")]
        public double Modulation4_Bypass { get; set; }

        [JsonProperty("modulation_4_power")]
        public double Modulation4_Power { get; set; }

        [JsonProperty("modulation_4_stereo")]
        public double Modulation4_Stereo { get; set; }

        [JsonProperty("modulation_50_amount")]
        public double Modulation50_Amount { get; set; }

        [JsonProperty("modulation_50_bipolar")]
        public double Modulation50_Bipolar { get; set; }

        [JsonProperty("modulation_50_bypass")]
        public double Modulation50_Bypass { get; set; }

        [JsonProperty("modulation_50_power")]
        public double Modulation50_Power { get; set; }

        [JsonProperty("modulation_50_stereo")]
        public double Modulation50_Stereo { get; set; }

        [JsonProperty("modulation_51_amount")]
        public double Modulation51_Amount { get; set; }

        [JsonProperty("modulation_51_bipolar")]
        public double Modulation51_Bipolar { get; set; }

        [JsonProperty("modulation_51_bypass")]
        public double Modulation51_Bypass { get; set; }

        [JsonProperty("modulation_51_power")]
        public double Modulation51_Power { get; set; }

        [JsonProperty("modulation_51_stereo")]
        public double Modulation51_Stereo { get; set; }

        [JsonProperty("modulation_52_amount")]
        public double Modulation52_Amount { get; set; }

        [JsonProperty("modulation_52_bipolar")]
        public double Modulation52_Bipolar { get; set; }

        [JsonProperty("modulation_52_bypass")]
        public double Modulation52_Bypass { get; set; }

        [JsonProperty("modulation_52_power")]
        public double Modulation52_Power { get; set; }

        [JsonProperty("modulation_52_stereo")]
        public double Modulation52_Stereo { get; set; }

        [JsonProperty("modulation_53_amount")]
        public double Modulation53_Amount { get; set; }

        [JsonProperty("modulation_53_bipolar")]
        public double Modulation53_Bipolar { get; set; }

        [JsonProperty("modulation_53_bypass")]
        public double Modulation53_Bypass { get; set; }

        [JsonProperty("modulation_53_power")]
        public double Modulation53_Power { get; set; }

        [JsonProperty("modulation_53_stereo")]
        public double Modulation53_Stereo { get; set; }

        [JsonProperty("modulation_54_amount")]
        public double Modulation54_Amount { get; set; }

        [JsonProperty("modulation_54_bipolar")]
        public double Modulation54_Bipolar { get; set; }

        [JsonProperty("modulation_54_bypass")]
        public double Modulation54_Bypass { get; set; }

        [JsonProperty("modulation_54_power")]
        public double Modulation54_Power { get; set; }

        [JsonProperty("modulation_54_stereo")]
        public double Modulation54_Stereo { get; set; }

        [JsonProperty("modulation_55_amount")]
        public double Modulation55_Amount { get; set; }

        [JsonProperty("modulation_55_bipolar")]
        public double Modulation55_Bipolar { get; set; }

        [JsonProperty("modulation_55_bypass")]
        public double Modulation55_Bypass { get; set; }

        [JsonProperty("modulation_55_power")]
        public double Modulation55_Power { get; set; }

        [JsonProperty("modulation_55_stereo")]
        public double Modulation55_Stereo { get; set; }

        [JsonProperty("modulation_56_amount")]
        public double Modulation56_Amount { get; set; }

        [JsonProperty("modulation_56_bipolar")]
        public double Modulation56_Bipolar { get; set; }

        [JsonProperty("modulation_56_bypass")]
        public double Modulation56_Bypass { get; set; }

        [JsonProperty("modulation_56_power")]
        public double Modulation56_Power { get; set; }

        [JsonProperty("modulation_56_stereo")]
        public double Modulation56_Stereo { get; set; }

        [JsonProperty("modulation_57_amount")]
        public double Modulation57_Amount { get; set; }

        [JsonProperty("modulation_57_bipolar")]
        public double Modulation57_Bipolar { get; set; }

        [JsonProperty("modulation_57_bypass")]
        public double Modulation57_Bypass { get; set; }

        [JsonProperty("modulation_57_power")]
        public double Modulation57_Power { get; set; }

        [JsonProperty("modulation_57_stereo")]
        public double Modulation57_Stereo { get; set; }

        [JsonProperty("modulation_58_amount")]
        public double Modulation58_Amount { get; set; }

        [JsonProperty("modulation_58_bipolar")]
        public double Modulation58_Bipolar { get; set; }

        [JsonProperty("modulation_58_bypass")]
        public double Modulation58_Bypass { get; set; }

        [JsonProperty("modulation_58_power")]
        public double Modulation58_Power { get; set; }

        [JsonProperty("modulation_58_stereo")]
        public double Modulation58_Stereo { get; set; }

        [JsonProperty("modulation_59_amount")]
        public double Modulation59_Amount { get; set; }

        [JsonProperty("modulation_59_bipolar")]
        public double Modulation59_Bipolar { get; set; }

        [JsonProperty("modulation_59_bypass")]
        public double Modulation59_Bypass { get; set; }

        [JsonProperty("modulation_59_power")]
        public double Modulation59_Power { get; set; }

        [JsonProperty("modulation_59_stereo")]
        public double Modulation59_Stereo { get; set; }

        [JsonProperty("modulation_5_amount")]
        public double Modulation5_Amount { get; set; }

        [JsonProperty("modulation_5_bipolar")]
        public double Modulation5_Bipolar { get; set; }

        [JsonProperty("modulation_5_bypass")]
        public double Modulation5_Bypass { get; set; }

        [JsonProperty("modulation_5_power")]
        public double Modulation5_Power { get; set; }

        [JsonProperty("modulation_5_stereo")]
        public double Modulation5_Stereo { get; set; }

        [JsonProperty("modulation_60_amount")]
        public double Modulation60_Amount { get; set; }

        [JsonProperty("modulation_60_bipolar")]
        public double Modulation60_Bipolar { get; set; }

        [JsonProperty("modulation_60_bypass")]
        public double Modulation60_Bypass { get; set; }

        [JsonProperty("modulation_60_power")]
        public double Modulation60_Power { get; set; }

        [JsonProperty("modulation_60_stereo")]
        public double Modulation60_Stereo { get; set; }

        [JsonProperty("modulation_61_amount")]
        public double Modulation61_Amount { get; set; }

        [JsonProperty("modulation_61_bipolar")]
        public double Modulation61_Bipolar { get; set; }

        [JsonProperty("modulation_61_bypass")]
        public double Modulation61_Bypass { get; set; }

        [JsonProperty("modulation_61_power")]
        public double Modulation61_Power { get; set; }

        [JsonProperty("modulation_61_stereo")]
        public double Modulation61_Stereo { get; set; }

        [JsonProperty("modulation_62_amount")]
        public double Modulation62_Amount { get; set; }

        [JsonProperty("modulation_62_bipolar")]
        public double Modulation62_Bipolar { get; set; }

        [JsonProperty("modulation_62_bypass")]
        public double Modulation62_Bypass { get; set; }

        [JsonProperty("modulation_62_power")]
        public double Modulation62_Power { get; set; }

        [JsonProperty("modulation_62_stereo")]
        public double Modulation62_Stereo { get; set; }

        [JsonProperty("modulation_63_amount")]
        public double Modulation63_Amount { get; set; }

        [JsonProperty("modulation_63_bipolar")]
        public double Modulation63_Bipolar { get; set; }

        [JsonProperty("modulation_63_bypass")]
        public double Modulation63_Bypass { get; set; }

        [JsonProperty("modulation_63_power")]
        public double Modulation63_Power { get; set; }

        [JsonProperty("modulation_63_stereo")]
        public double Modulation63_Stereo { get; set; }

        [JsonProperty("modulation_64_amount")]
        public double Modulation64_Amount { get; set; }

        [JsonProperty("modulation_64_bipolar")]
        public double Modulation64_Bipolar { get; set; }

        [JsonProperty("modulation_64_bypass")]
        public double Modulation64_Bypass { get; set; }

        [JsonProperty("modulation_64_power")]
        public double Modulation64_Power { get; set; }

        [JsonProperty("modulation_64_stereo")]
        public double Modulation64_Stereo { get; set; }

        [JsonProperty("modulation_6_amount")]
        public double Modulation6_Amount { get; set; }

        [JsonProperty("modulation_6_bipolar")]
        public double Modulation6_Bipolar { get; set; }

        [JsonProperty("modulation_6_bypass")]
        public double Modulation6_Bypass { get; set; }

        [JsonProperty("modulation_6_power")]
        public double Modulation6_Power { get; set; }

        [JsonProperty("modulation_6_stereo")]
        public double Modulation6_Stereo { get; set; }

        [JsonProperty("modulation_7_amount")]
        public double Modulation7_Amount { get; set; }

        [JsonProperty("modulation_7_bipolar")]
        public double Modulation7_Bipolar { get; set; }

        [JsonProperty("modulation_7_bypass")]
        public double Modulation7_Bypass { get; set; }

        [JsonProperty("modulation_7_power")]
        public double Modulation7_Power { get; set; }

        [JsonProperty("modulation_7_stereo")]
        public double Modulation7_Stereo { get; set; }

        [JsonProperty("modulation_8_amount")]
        public double Modulation8_Amount { get; set; }

        [JsonProperty("modulation_8_bipolar")]
        public double Modulation8_Bipolar { get; set; }

        [JsonProperty("modulation_8_bypass")]
        public double Modulation8_Bypass { get; set; }

        [JsonProperty("modulation_8_power")]
        public double Modulation8_Power { get; set; }

        [JsonProperty("modulation_8_stereo")]
        public double Modulation8_Stereo { get; set; }

        [JsonProperty("modulation_9_amount")]
        public double Modulation9_Amount { get; set; }

        [JsonProperty("modulation_9_bipolar")]
        public double Modulation9_Bipolar { get; set; }

        [JsonProperty("modulation_9_bypass")]
        public double Modulation9_Bypass { get; set; }

        [JsonProperty("modulation_9_power")]
        public double Modulation9_Power { get; set; }

        [JsonProperty("modulation_9_stereo")]
        public double Modulation9_Stereo { get; set; }

        [JsonProperty("modulations")]
        public Modulation[] Modulations { get; set; }

        [JsonProperty("osc_1_destination")]
        public double Osc1_Destination { get; set; }

        [JsonProperty("osc_1_detune_power")]
        public double Osc1_DetunePower { get; set; }

        [JsonProperty("osc_1_detune_range")]
        public double Osc1_DetuneRange { get; set; }

        [JsonProperty("osc_1_distortion_amount")]
        public double Osc1_DistortionAmount { get; set; }

        [JsonProperty("osc_1_distortion_phase")]
        public double Osc1_DistortionPhase { get; set; }

        [JsonProperty("osc_1_distortion_spread")]
        public double Osc1_DistortionSpread { get; set; }

        [JsonProperty("osc_1_distortion_type")]
        public double Osc1_DistortionType { get; set; }

        [JsonProperty("osc_1_frame_spread")]
        public double Osc1_FrameSpread { get; set; }

        [JsonProperty("osc_1_level")]
        public double Osc1_Level { get; set; }

        [JsonProperty("osc_1_midi_track")]
        public double Osc1_MidiTrack { get; set; }

        [JsonProperty("osc_1_on")]
        public double Osc1_On { get; set; }

        [JsonProperty("osc_1_pan")]
        public double Osc1_Pan { get; set; }

        [JsonProperty("osc_1_phase")]
        public double Osc1_Phase { get; set; }

        [JsonProperty("osc_1_random_phase")]
        public double Osc1_RandomPhase { get; set; }

        [JsonProperty("osc_1_smooth_interpolation")]
        public double Osc1_SmoothInterpolation { get; set; }

        [JsonProperty("osc_1_spectral_morph_amount")]
        public double Osc1_SpectralMorphAmount { get; set; }

        [JsonProperty("osc_1_spectral_morph_spread")]
        public double Osc1_SpectralMorphSpread { get; set; }

        [JsonProperty("osc_1_spectral_morph_type")]
        public double Osc1_SpectralMorphType { get; set; }

        [JsonProperty("osc_1_spectral_unison")]
        public double Osc1_SpectralUnison { get; set; }

        [JsonProperty("osc_1_stack_style")]
        public double Osc1_StackStyle { get; set; }

        [JsonProperty("osc_1_stereo_spread")]
        public double Osc1_StereoSpread { get; set; }

        [JsonProperty("osc_1_transpose")]
        public double Osc1_Transpose { get; set; }

        [JsonProperty("osc_1_transpose_quantize")]
        public double Osc1_TransposeQuantize { get; set; }

        [JsonProperty("osc_1_tune")]
        public double Osc1_Tune { get; set; }

        [JsonProperty("osc_1_unison_blend")]
        public double Osc1_UnisonBlend { get; set; }

        [JsonProperty("osc_1_unison_detune")]
        public double Osc1_UnisonDetune { get; set; }

        [JsonProperty("osc_1_unison_voices")]
        public double Osc1_UnisonVoices { get; set; }

        [JsonProperty("osc_1_view_2d")]
        public double Osc1_View2D { get; set; }

        [JsonProperty("osc_1_wave_frame")]
        public double Osc1_WaveFrame { get; set; }

        [JsonProperty("osc_2_destination")]
        public double Osc2_Destination { get; set; }

        [JsonProperty("osc_2_detune_power")]
        public double Osc2_DetunePower { get; set; }

        [JsonProperty("osc_2_detune_range")]
        public double Osc2_DetuneRange { get; set; }

        [JsonProperty("osc_2_distortion_amount")]
        public double Osc2_DistortionAmount { get; set; }

        [JsonProperty("osc_2_distortion_phase")]
        public double Osc2_DistortionPhase { get; set; }

        [JsonProperty("osc_2_distortion_spread")]
        public double Osc2_DistortionSpread { get; set; }

        [JsonProperty("osc_2_distortion_type")]
        public double Osc2_DistortionType { get; set; }

        [JsonProperty("osc_2_frame_spread")]
        public double Osc2_FrameSpread { get; set; }

        [JsonProperty("osc_2_level")]
        public double Osc2_Level { get; set; }

        [JsonProperty("osc_2_midi_track")]
        public double Osc2_MidiTrack { get; set; }

        [JsonProperty("osc_2_on")]
        public double Osc2_On { get; set; }

        [JsonProperty("osc_2_pan")]
        public double Osc2_Pan { get; set; }

        [JsonProperty("osc_2_phase")]
        public double Osc2_Phase { get; set; }

        [JsonProperty("osc_2_random_phase")]
        public double Osc2_RandomPhase { get; set; }

        [JsonProperty("osc_2_smooth_interpolation")]
        public double Osc2_SmoothInterpolation { get; set; }

        [JsonProperty("osc_2_spectral_morph_amount")]
        public double Osc2_SpectralMorphAmount { get; set; }

        [JsonProperty("osc_2_spectral_morph_spread")]
        public double Osc2_SpectralMorphSpread { get; set; }

        [JsonProperty("osc_2_spectral_morph_type")]
        public double Osc2_SpectralMorphType { get; set; }

        [JsonProperty("osc_2_spectral_unison")]
        public double Osc2_SpectralUnison { get; set; }

        [JsonProperty("osc_2_stack_style")]
        public double Osc2_StackStyle { get; set; }

        [JsonProperty("osc_2_stereo_spread")]
        public double Osc2_StereoSpread { get; set; }

        [JsonProperty("osc_2_transpose")]
        public double Osc2_Transpose { get; set; }

        [JsonProperty("osc_2_transpose_quantize")]
        public double Osc2_TransposeQuantize { get; set; }

        [JsonProperty("osc_2_tune")]
        public double Osc2_Tune { get; set; }

        [JsonProperty("osc_2_unison_blend")]
        public double Osc2_UnisonBlend { get; set; }

        [JsonProperty("osc_2_unison_detune")]
        public double Osc2_UnisonDetune { get; set; }

        [JsonProperty("osc_2_unison_voices")]
        public double Osc2_UnisonVoices { get; set; }

        [JsonProperty("osc_2_view_2d")]
        public double Osc2_View2D { get; set; }

        [JsonProperty("osc_2_wave_frame")]
        public double Osc2_WaveFrame { get; set; }

        [JsonProperty("osc_3_destination")]
        public double Osc3_Destination { get; set; }

        [JsonProperty("osc_3_detune_power")]
        public double Osc3_DetunePower { get; set; }

        [JsonProperty("osc_3_detune_range")]
        public double Osc3_DetuneRange { get; set; }

        [JsonProperty("osc_3_distortion_amount")]
        public double Osc3_DistortionAmount { get; set; }

        [JsonProperty("osc_3_distortion_phase")]
        public double Osc3_DistortionPhase { get; set; }

        [JsonProperty("osc_3_distortion_spread")]
        public double Osc3_DistortionSpread { get; set; }

        [JsonProperty("osc_3_distortion_type")]
        public double Osc3_DistortionType { get; set; }

        [JsonProperty("osc_3_frame_spread")]
        public double Osc3_FrameSpread { get; set; }

        [JsonProperty("osc_3_level")]
        public double Osc3_Level { get; set; }

        [JsonProperty("osc_3_midi_track")]
        public double Osc3_MidiTrack { get; set; }

        [JsonProperty("osc_3_on")]
        public double Osc3_On { get; set; }

        [JsonProperty("osc_3_pan")]
        public double Osc3_Pan { get; set; }

        [JsonProperty("osc_3_phase")]
        public double Osc3_Phase { get; set; }

        [JsonProperty("osc_3_random_phase")]
        public double Osc3_RandomPhase { get; set; }

        [JsonProperty("osc_3_smooth_interpolation")]
        public double Osc3_SmoothInterpolation { get; set; }

        [JsonProperty("osc_3_spectral_morph_amount")]
        public double Osc3_SpectralMorphAmount { get; set; }

        [JsonProperty("osc_3_spectral_morph_spread")]
        public double Osc3_SpectralMorphSpread { get; set; }

        [JsonProperty("osc_3_spectral_morph_type")]
        public double Osc3_SpectralMorphType { get; set; }

        [JsonProperty("osc_3_spectral_unison")]
        public double Osc3_SpectralUnison { get; set; }

        [JsonProperty("osc_3_stack_style")]
        public double Osc3_StackStyle { get; set; }

        [JsonProperty("osc_3_stereo_spread")]
        public double Osc3_StereoSpread { get; set; }

        [JsonProperty("osc_3_transpose")]
        public double Osc3_Transpose { get; set; }

        [JsonProperty("osc_3_transpose_quantize")]
        public double Osc3_TransposeQuantize { get; set; }

        [JsonProperty("osc_3_tune")]
        public double Osc3_Tune { get; set; }

        [JsonProperty("osc_3_unison_blend")]
        public double Osc3_UnisonBlend { get; set; }

        [JsonProperty("osc_3_unison_detune")]
        public double Osc3_UnisonDetune { get; set; }

        [JsonProperty("osc_3_unison_voices")]
        public double Osc3_UnisonVoices { get; set; }

        [JsonProperty("osc_3_view_2d")]
        public double Osc3_View2D { get; set; }

        [JsonProperty("osc_3_wave_frame")]
        public double Osc3_WaveFrame { get; set; }

        [JsonProperty("oversampling")]
        public double Oversampling { get; set; }

        [JsonProperty("phaser_blend")]
        public double PhaserBlend { get; set; }

        [JsonProperty("phaser_center")]
        public double PhaserCenter { get; set; }

        [JsonProperty("phaser_dry_wet")]
        public double PhaserDryWet { get; set; }

        [JsonProperty("phaser_feedback")]
        public double PhaserFeedback { get; set; }

        [JsonProperty("phaser_frequency")]
        public double PhaserFrequency { get; set; }

        [JsonProperty("phaser_mod_depth")]
        public double PhaserModDepth { get; set; }

        [JsonProperty("phaser_on")]
        public double PhaserOn { get; set; }

        [JsonProperty("phaser_phase_offset")]
        public double PhaserPhaseOffset { get; set; }

        [JsonProperty("phaser_sync")]
        public double PhaserSync { get; set; }

        [JsonProperty("phaser_tempo")]
        public double PhaserTempo { get; set; }

        [JsonProperty("pitch_bend_range")]
        public double PitchBendRange { get; set; }

        [JsonProperty("pitch_wheel")]
        public double PitchWheel { get; set; }

        [JsonProperty("polyphony")]
        public double Polyphony { get; set; }

        [JsonProperty("portamento_force")]
        public double PortamentoForce { get; set; }

        [JsonProperty("portamento_scale")]
        public double PortamentoScale { get; set; }

        [JsonProperty("portamento_slope")]
        public double PortamentoSlope { get; set; }

        [JsonProperty("portamento_time")]
        public double PortamentoTime { get; set; }

        [JsonProperty("random_1_frequency")]
        public double Random1_Frequency { get; set; }

        [JsonProperty("random_1_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Random1_KeytrackTranspose { get; set; }

        [JsonProperty("random_1_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Random1_KeytrackTune { get; set; }

        [JsonProperty("random_1_stereo")]
        public double Random1_Stereo { get; set; }

        [JsonProperty("random_1_style")]
        public double Random1_Style { get; set; }

        [JsonProperty("random_1_sync")]
        public double Random1_Sync { get; set; }

        [JsonProperty("random_1_sync_type")]
        public double Random1_SyncType { get; set; }

        [JsonProperty("random_1_tempo")]
        public double Random1_Tempo { get; set; }

        [JsonProperty("random_2_frequency")]
        public double Random2_Frequency { get; set; }

        [JsonProperty("random_2_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Random2_KeytrackTranspose { get; set; }

        [JsonProperty("random_2_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Random2_KeytrackTune { get; set; }

        [JsonProperty("random_2_stereo")]
        public double Random2_Stereo { get; set; }

        [JsonProperty("random_2_style")]
        public double Random2_Style { get; set; }

        [JsonProperty("random_2_sync")]
        public double Random2_Sync { get; set; }

        [JsonProperty("random_2_sync_type")]
        public double Random2_SyncType { get; set; }

        [JsonProperty("random_2_tempo")]
        public double Random2_Tempo { get; set; }

        [JsonProperty("random_3_frequency")]
        public double Random3_Frequency { get; set; }

        [JsonProperty("random_3_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Random3_KeytrackTranspose { get; set; }

        [JsonProperty("random_3_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Random3_KeytrackTune { get; set; }

        [JsonProperty("random_3_stereo")]
        public double Random3_Stereo { get; set; }

        [JsonProperty("random_3_style")]
        public double Random3_Style { get; set; }

        [JsonProperty("random_3_sync")]
        public double Random3_Sync { get; set; }

        [JsonProperty("random_3_sync_type")]
        public double Random3_SyncType { get; set; }

        [JsonProperty("random_3_tempo")]
        public double Random3_Tempo { get; set; }

        [JsonProperty("random_4_frequency")]
        public double Random4_Frequency { get; set; }

        [JsonProperty("random_4_keytrack_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? Random4_KeytrackTranspose { get; set; }

        [JsonProperty("random_4_keytrack_tune", NullValueHandling = NullValueHandling.Ignore)]
        public double? Random4_KeytrackTune { get; set; }

        [JsonProperty("random_4_stereo")]
        public double Random4_Stereo { get; set; }

        [JsonProperty("random_4_style")]
        public double Random4_Style { get; set; }

        [JsonProperty("random_4_sync")]
        public double Random4_Sync { get; set; }

        [JsonProperty("random_4_sync_type")]
        public double Random4_SyncType { get; set; }

        [JsonProperty("random_4_tempo")]
        public double Random4_Tempo { get; set; }

        [JsonProperty("reverb_chorus_amount")]
        public double ReverbChorusAmount { get; set; }

        [JsonProperty("reverb_chorus_frequency")]
        public double ReverbChorusFrequency { get; set; }

        [JsonProperty("reverb_decay_time")]
        public double ReverbDecayTime { get; set; }

        [JsonProperty("reverb_delay", NullValueHandling = NullValueHandling.Ignore)]
        public double? ReverbDelay { get; set; }

        [JsonProperty("reverb_dry_wet")]
        public double ReverbDryWet { get; set; }

        [JsonProperty("reverb_high_shelf_cutoff")]
        public double ReverbHighShelfCutoff { get; set; }

        [JsonProperty("reverb_high_shelf_gain")]
        public double ReverbHighShelfGain { get; set; }

        [JsonProperty("reverb_low_shelf_cutoff")]
        public double ReverbLowShelfCutoff { get; set; }

        [JsonProperty("reverb_low_shelf_gain")]
        public double ReverbLowShelfGain { get; set; }

        [JsonProperty("reverb_on")]
        public double ReverbOn { get; set; }

        [JsonProperty("reverb_pre_high_cutoff")]
        public double ReverbPreHighCutoff { get; set; }

        [JsonProperty("reverb_pre_low_cutoff")]
        public double ReverbPreLowCutoff { get; set; }

        [JsonProperty("reverb_size")]
        public double ReverbSize { get; set; }

        [JsonProperty("sample")]
        public Sample Sample { get; set; }

        [JsonProperty("sample_bounce", NullValueHandling = NullValueHandling.Ignore)]
        public double? SampleBounce { get; set; }

        [JsonProperty("sample_destination")]
        public double SampleDestination { get; set; }

        [JsonProperty("sample_keytrack")]
        public double SampleKeytrack { get; set; }

        [JsonProperty("sample_level")]
        public double SampleLevel { get; set; }

        [JsonProperty("sample_loop")]
        public double SampleLoop { get; set; }

        [JsonProperty("sample_on")]
        public double SampleOn { get; set; }

        [JsonProperty("sample_pan")]
        public double SamplePan { get; set; }

        [JsonProperty("sample_random_phase")]
        public double SampleRandomPhase { get; set; }

        [JsonProperty("sample_transpose")]
        public double SampleTranspose { get; set; }

        [JsonProperty("sample_transpose_quantize")]
        public double SampleTransposeQuantize { get; set; }

        [JsonProperty("sample_tune")]
        public double SampleTune { get; set; }

        [JsonProperty("stereo_mode", NullValueHandling = NullValueHandling.Ignore)]
        public double? StereoMode { get; set; }

        [JsonProperty("stereo_routing")]
        public double StereoRouting { get; set; }

        [JsonProperty("velocity_track")]
        public double VelocityTrack { get; set; }

        [JsonProperty("view_spectrogram", NullValueHandling = NullValueHandling.Ignore)]
        public double? ViewSpectrogram { get; set; }

        [JsonProperty("voice_amplitude")]
        public double VoiceAmplitude { get; set; }

        [JsonProperty("voice_override", NullValueHandling = NullValueHandling.Ignore)]
        public double? VoiceOverride { get; set; }

        [JsonProperty("voice_priority")]
        public double VoicePriority { get; set; }

        [JsonProperty("voice_transpose", NullValueHandling = NullValueHandling.Ignore)]
        public double? VoiceTranspose { get; set; }

        [JsonProperty("voice_tune")]
        public double VoiceTune { get; set; }

        [JsonProperty("volume")]
        public double Volume { get; set; }

        [JsonProperty("wavetables")]
        public Wavetable[] Wavetables { get; set; }
    }

    public partial class Lfo
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("num_points")]
        public double NumPoints { get; set; }

        [JsonProperty("points")]
        public double[] Points { get; set; }

        [JsonProperty("powers")]
        public double[] Powers { get; set; }

        [JsonProperty("smooth")]
        public bool Smooth { get; set; }
    }

    public partial class Modulation
    {
        [JsonProperty("destination")]
        public string Destination { get; set; }

        [JsonProperty("line_mapping", NullValueHandling = NullValueHandling.Ignore)]
        public Lfo LineMapping { get; set; }

        [JsonProperty("source")]
        public SourceEnum Source { get; set; }
    }

    public partial class Sample
    {
        [JsonProperty("length")]
        public double Length { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("sample_rate")]
        public double SampleRate { get; set; }

        [JsonProperty("samples")]
        public string Samples { get; set; }

        [JsonProperty("samples_stereo", NullValueHandling = NullValueHandling.Ignore)]
        public string SamplesStereo { get; set; }
    }

    public partial class Wavetable
    {
        [JsonProperty("author", NullValueHandling = NullValueHandling.Ignore)]
        public string Author { get; set; }

        [JsonProperty("full_normalize")]
        public bool FullNormalize { get; set; }

        [JsonProperty("groups")]
        public Group[] Groups { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("remove_all_dc")]
        public bool RemoveAllDc { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }
    }

    public partial class Group
    {
        [JsonProperty("components")]
        public Component[] Components { get; set; }
    }

    public partial class Component
    {
        [JsonProperty("audio_file", NullValueHandling = NullValueHandling.Ignore)]
        public string AudioFile { get; set; }

        [JsonProperty("audio_sample_rate", NullValueHandling = NullValueHandling.Ignore)]
        public double? AudioSampleRate { get; set; }

        [JsonProperty("fade_style", NullValueHandling = NullValueHandling.Ignore)]
        public double? FadeStyle { get; set; }

        [JsonProperty("horizontal_asymmetric", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HorizontalAsymmetric { get; set; }

        [JsonProperty("interpolation", NullValueHandling = NullValueHandling.Ignore)]
        public double? Interpolation { get; set; }

        [JsonProperty("interpolation_style")]
        public double InterpolationStyle { get; set; }

        [JsonProperty("keyframes")]
        public Keyframe[] Keyframes { get; set; }

        [JsonProperty("normalize", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Normalize { get; set; }

        [JsonProperty("normalize_gain", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NormalizeGain { get; set; }

        [JsonProperty("normalize_mult", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NormalizeMult { get; set; }

        [JsonProperty("num_points", NullValueHandling = NullValueHandling.Ignore)]
        public double? NumPoints { get; set; }

        [JsonProperty("phase_style", NullValueHandling = NullValueHandling.Ignore)]
        public double? PhaseStyle { get; set; }

        [JsonProperty("random_seed", NullValueHandling = NullValueHandling.Ignore)]
        public double? RandomSeed { get; set; }

        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public double? Style { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("vertical_asymmetric", NullValueHandling = NullValueHandling.Ignore)]
        public bool? VerticalAsymmetric { get; set; }

        [JsonProperty("window_shape", NullValueHandling = NullValueHandling.Ignore)]
        public double? WindowShape { get; set; }

        [JsonProperty("window_size", NullValueHandling = NullValueHandling.Ignore)]
        public double? WindowSize { get; set; }
    }

    public partial class Keyframe
    {
        [JsonProperty("cutoff", NullValueHandling = NullValueHandling.Ignore)]
        public double? Cutoff { get; set; }

        [JsonProperty("down_run_rise", NullValueHandling = NullValueHandling.Ignore)]
        public double? DownRunRise { get; set; }

        [JsonProperty("fold_boost", NullValueHandling = NullValueHandling.Ignore)]
        public double? FoldBoost { get; set; }

        [JsonProperty("horizontal_power", NullValueHandling = NullValueHandling.Ignore)]
        public double? HorizontalPower { get; set; }

        [JsonProperty("left_position", NullValueHandling = NullValueHandling.Ignore)]
        public double? LeftPosition { get; set; }

        [JsonProperty("line", NullValueHandling = NullValueHandling.Ignore)]
        public Lfo Line { get; set; }

        [JsonProperty("mix", NullValueHandling = NullValueHandling.Ignore)]
        public double? Mix { get; set; }

        [JsonProperty("phase", NullValueHandling = NullValueHandling.Ignore)]
        public double? Phase { get; set; }

        [JsonProperty("position")]
        public double Position { get; set; }

        [JsonProperty("pull_power", NullValueHandling = NullValueHandling.Ignore)]
        public double? PullPower { get; set; }

        [JsonProperty("right_position", NullValueHandling = NullValueHandling.Ignore)]
        public double? RightPosition { get; set; }

        [JsonProperty("shape", NullValueHandling = NullValueHandling.Ignore)]
        public double? Shape { get; set; }

        [JsonProperty("start_position", NullValueHandling = NullValueHandling.Ignore)]
        public double? StartPosition { get; set; }

        [JsonProperty("up_run_rise", NullValueHandling = NullValueHandling.Ignore)]
        public double? UpRunRise { get; set; }

        [JsonProperty("vertical_power", NullValueHandling = NullValueHandling.Ignore)]
        public double? VerticalPower { get; set; }

        [JsonProperty("wave_data", NullValueHandling = NullValueHandling.Ignore)]
        public string WaveData { get; set; }

        [JsonProperty("window_fade", NullValueHandling = NullValueHandling.Ignore)]
        public double? WindowFade { get; set; }

        [JsonProperty("window_size", NullValueHandling = NullValueHandling.Ignore)]
        public double? WindowSize { get; set; }
    }

    public enum PresetStyleEnum { Bass, Empty, Experiment, Keys, Lead, Pad, Percussion, Sequence, Sfx, Template };

    public enum SourceEnum { Aftertouch, Empty, Env1, Env2, Env3, Env4, Env5, Env6, Lfo1, Lfo2, Lfo3, Lfo4, Lfo5, Lfo6, Lfo7, Lfo8, Lift, MacroControl1, MacroControl2, MacroControl3, MacroControl4, ModWheel, Note, NoteInOctave, PitchWheel, Random, Random1, Random2, Random3, Random4, Slide, Stereo, Velocity };

    public enum TypeEnum { AudioFileSource, FrequencyFilter, LineSource, PhaseShift, ShepardToneSource, SlewLimiter, WaveFolder, WaveSource, WaveWarp, WaveWindow };

    public partial class VitalPreset
    {
        public static VitalPreset FromJson(string json) => JsonConvert.DeserializeObject<VitalPreset>(json, QuickType.Converter.Settings);
    }

    public class PresetStyle
    {
        public static PresetStyleEnum FromJson(string json) => JsonConvert.DeserializeObject<PresetStyleEnum>(json, QuickType.Converter.Settings);
    }

    public partial class PresetSettings
    {
        public static PresetSettings FromJson(string json) => JsonConvert.DeserializeObject<PresetSettings>(json, QuickType.Converter.Settings);
    }

    public partial class Lfo
    {
        public static Lfo FromJson(string json) => JsonConvert.DeserializeObject<Lfo>(json, QuickType.Converter.Settings);
    }

    public partial class Modulation
    {
        public static Modulation FromJson(string json) => JsonConvert.DeserializeObject<Modulation>(json, QuickType.Converter.Settings);
    }

    public class Source
    {
        public static SourceEnum FromJson(string json) => JsonConvert.DeserializeObject<SourceEnum>(json, QuickType.Converter.Settings);
    }

    public partial class Sample
    {
        public static Sample FromJson(string json) => JsonConvert.DeserializeObject<Sample>(json, QuickType.Converter.Settings);
    }

    public partial class Wavetable
    {
        public static Wavetable FromJson(string json) => JsonConvert.DeserializeObject<Wavetable>(json, QuickType.Converter.Settings);
    }

    public partial class Group
    {
        public static Group FromJson(string json) => JsonConvert.DeserializeObject<Group>(json, QuickType.Converter.Settings);
    }

    public partial class Component
    {
        public static Component FromJson(string json) => JsonConvert.DeserializeObject<Component>(json, QuickType.Converter.Settings);
    }

    public partial class Keyframe
    {
        public static Keyframe FromJson(string json) => JsonConvert.DeserializeObject<Keyframe>(json, QuickType.Converter.Settings);
    }

    public class PurpleType
    {
        public static TypeEnum FromJson(string json) => JsonConvert.DeserializeObject<TypeEnum>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this VitalPreset self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this PresetStyleEnum self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this PresetSettings self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Lfo self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Modulation self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this SourceEnum self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Sample self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Wavetable self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Group self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Component self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Keyframe self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this TypeEnum self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                PresetStyleEnumConverter.Singleton,
                SourceEnumConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PresetStyleEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PresetStyleEnum) || t == typeof(PresetStyleEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return PresetStyleEnum.Empty;
                case "Bass":
                    return PresetStyleEnum.Bass;
                case "Experiment":
                    return PresetStyleEnum.Experiment;
                case "Keys":
                    return PresetStyleEnum.Keys;
                case "Lead":
                    return PresetStyleEnum.Lead;
                case "Pad":
                    return PresetStyleEnum.Pad;
                case "Percussion":
                    return PresetStyleEnum.Percussion;
                case "SFX":
                    return PresetStyleEnum.Sfx;
                case "Sequence":
                    return PresetStyleEnum.Sequence;
                case "Template":
                    return PresetStyleEnum.Template;
            }
            throw new Exception("Cannot unmarshal type PresetStyleEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PresetStyleEnum)untypedValue;
            switch (value)
            {
                case PresetStyleEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case PresetStyleEnum.Bass:
                    serializer.Serialize(writer, "Bass");
                    return;
                case PresetStyleEnum.Experiment:
                    serializer.Serialize(writer, "Experiment");
                    return;
                case PresetStyleEnum.Keys:
                    serializer.Serialize(writer, "Keys");
                    return;
                case PresetStyleEnum.Lead:
                    serializer.Serialize(writer, "Lead");
                    return;
                case PresetStyleEnum.Pad:
                    serializer.Serialize(writer, "Pad");
                    return;
                case PresetStyleEnum.Percussion:
                    serializer.Serialize(writer, "Percussion");
                    return;
                case PresetStyleEnum.Sfx:
                    serializer.Serialize(writer, "SFX");
                    return;
                case PresetStyleEnum.Sequence:
                    serializer.Serialize(writer, "Sequence");
                    return;
                case PresetStyleEnum.Template:
                    serializer.Serialize(writer, "Template");
                    return;
            }
            throw new Exception("Cannot marshal type PresetStyleEnum");
        }

        public static readonly PresetStyleEnumConverter Singleton = new PresetStyleEnumConverter();
    }

    internal class SourceEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SourceEnum) || t == typeof(SourceEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return SourceEnum.Empty;
                case "aftertouch":
                    return SourceEnum.Aftertouch;
                case "env_1":
                    return SourceEnum.Env1;
                case "env_2":
                    return SourceEnum.Env2;
                case "env_3":
                    return SourceEnum.Env3;
                case "env_4":
                    return SourceEnum.Env4;
                case "env_5":
                    return SourceEnum.Env5;
                case "env_6":
                    return SourceEnum.Env6;
                case "lfo_1":
                    return SourceEnum.Lfo1;
                case "lfo_2":
                    return SourceEnum.Lfo2;
                case "lfo_3":
                    return SourceEnum.Lfo3;
                case "lfo_4":
                    return SourceEnum.Lfo4;
                case "lfo_5":
                    return SourceEnum.Lfo5;
                case "lfo_6":
                    return SourceEnum.Lfo6;
                case "lfo_7":
                    return SourceEnum.Lfo7;
                case "lfo_8":
                    return SourceEnum.Lfo8;
                case "lift":
                    return SourceEnum.Lift;
                case "macro_control_1":
                    return SourceEnum.MacroControl1;
                case "macro_control_2":
                    return SourceEnum.MacroControl2;
                case "macro_control_3":
                    return SourceEnum.MacroControl3;
                case "macro_control_4":
                    return SourceEnum.MacroControl4;
                case "mod_wheel":
                    return SourceEnum.ModWheel;
                case "note":
                    return SourceEnum.Note;
                case "note_in_octave":
                    return SourceEnum.NoteInOctave;
                case "pitch_wheel":
                    return SourceEnum.PitchWheel;
                case "random":
                    return SourceEnum.Random;
                case "random_1":
                    return SourceEnum.Random1;
                case "random_2":
                    return SourceEnum.Random2;
                case "random_3":
                    return SourceEnum.Random3;
                case "random_4":
                    return SourceEnum.Random4;
                case "slide":
                    return SourceEnum.Slide;
                case "stereo":
                    return SourceEnum.Stereo;
                case "velocity":
                    return SourceEnum.Velocity;
            }
            throw new Exception("Cannot unmarshal type SourceEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SourceEnum)untypedValue;
            switch (value)
            {
                case SourceEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case SourceEnum.Aftertouch:
                    serializer.Serialize(writer, "aftertouch");
                    return;
                case SourceEnum.Env1:
                    serializer.Serialize(writer, "env_1");
                    return;
                case SourceEnum.Env2:
                    serializer.Serialize(writer, "env_2");
                    return;
                case SourceEnum.Env3:
                    serializer.Serialize(writer, "env_3");
                    return;
                case SourceEnum.Env4:
                    serializer.Serialize(writer, "env_4");
                    return;
                case SourceEnum.Env5:
                    serializer.Serialize(writer, "env_5");
                    return;
                case SourceEnum.Env6:
                    serializer.Serialize(writer, "env_6");
                    return;
                case SourceEnum.Lfo1:
                    serializer.Serialize(writer, "lfo_1");
                    return;
                case SourceEnum.Lfo2:
                    serializer.Serialize(writer, "lfo_2");
                    return;
                case SourceEnum.Lfo3:
                    serializer.Serialize(writer, "lfo_3");
                    return;
                case SourceEnum.Lfo4:
                    serializer.Serialize(writer, "lfo_4");
                    return;
                case SourceEnum.Lfo5:
                    serializer.Serialize(writer, "lfo_5");
                    return;
                case SourceEnum.Lfo6:
                    serializer.Serialize(writer, "lfo_6");
                    return;
                case SourceEnum.Lfo7:
                    serializer.Serialize(writer, "lfo_7");
                    return;
                case SourceEnum.Lfo8:
                    serializer.Serialize(writer, "lfo_8");
                    return;
                case SourceEnum.Lift:
                    serializer.Serialize(writer, "lift");
                    return;
                case SourceEnum.MacroControl1:
                    serializer.Serialize(writer, "macro_control_1");
                    return;
                case SourceEnum.MacroControl2:
                    serializer.Serialize(writer, "macro_control_2");
                    return;
                case SourceEnum.MacroControl3:
                    serializer.Serialize(writer, "macro_control_3");
                    return;
                case SourceEnum.MacroControl4:
                    serializer.Serialize(writer, "macro_control_4");
                    return;
                case SourceEnum.ModWheel:
                    serializer.Serialize(writer, "mod_wheel");
                    return;
                case SourceEnum.Note:
                    serializer.Serialize(writer, "note");
                    return;
                case SourceEnum.NoteInOctave:
                    serializer.Serialize(writer, "note_in_octave");
                    return;
                case SourceEnum.PitchWheel:
                    serializer.Serialize(writer, "pitch_wheel");
                    return;
                case SourceEnum.Random:
                    serializer.Serialize(writer, "random");
                    return;
                case SourceEnum.Random1:
                    serializer.Serialize(writer, "random_1");
                    return;
                case SourceEnum.Random2:
                    serializer.Serialize(writer, "random_2");
                    return;
                case SourceEnum.Random3:
                    serializer.Serialize(writer, "random_3");
                    return;
                case SourceEnum.Random4:
                    serializer.Serialize(writer, "random_4");
                    return;
                case SourceEnum.Slide:
                    serializer.Serialize(writer, "slide");
                    return;
                case SourceEnum.Stereo:
                    serializer.Serialize(writer, "stereo");
                    return;
                case SourceEnum.Velocity:
                    serializer.Serialize(writer, "velocity");
                    return;
            }
            throw new Exception("Cannot marshal type SourceEnum");
        }

        public static readonly SourceEnumConverter Singleton = new SourceEnumConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Audio File Source":
                    return TypeEnum.AudioFileSource;
                case "Frequency Filter":
                    return TypeEnum.FrequencyFilter;
                case "Line Source":
                    return TypeEnum.LineSource;
                case "Phase Shift":
                    return TypeEnum.PhaseShift;
                case "Shepard Tone Source":
                    return TypeEnum.ShepardToneSource;
                case "Slew Limiter":
                    return TypeEnum.SlewLimiter;
                case "Wave Folder":
                    return TypeEnum.WaveFolder;
                case "Wave Source":
                    return TypeEnum.WaveSource;
                case "Wave Warp":
                    return TypeEnum.WaveWarp;
                case "Wave Window":
                    return TypeEnum.WaveWindow;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.AudioFileSource:
                    serializer.Serialize(writer, "Audio File Source");
                    return;
                case TypeEnum.FrequencyFilter:
                    serializer.Serialize(writer, "Frequency Filter");
                    return;
                case TypeEnum.LineSource:
                    serializer.Serialize(writer, "Line Source");
                    return;
                case TypeEnum.PhaseShift:
                    serializer.Serialize(writer, "Phase Shift");
                    return;
                case TypeEnum.ShepardToneSource:
                    serializer.Serialize(writer, "Shepard Tone Source");
                    return;
                case TypeEnum.SlewLimiter:
                    serializer.Serialize(writer, "Slew Limiter");
                    return;
                case TypeEnum.WaveFolder:
                    serializer.Serialize(writer, "Wave Folder");
                    return;
                case TypeEnum.WaveSource:
                    serializer.Serialize(writer, "Wave Source");
                    return;
                case TypeEnum.WaveWarp:
                    serializer.Serialize(writer, "Wave Warp");
                    return;
                case TypeEnum.WaveWindow:
                    serializer.Serialize(writer, "Wave Window");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
